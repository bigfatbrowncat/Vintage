               jmp main                          ; the entry point is here

; *** HELPER FUNCTIONS SECTION *********************************************************************************************

inttostr:      ; in:  (integer value) 
               ; out: (target string pointer)

               jmp its_s
its_digs:      text "0123456789ABCDEF"
its_strbuf:    text 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    ; 30 digits should be enough + zero in the end

its_s:         alloc 12                          ; 3 * 4 (text ptr 4, int buf1 4, int buf2 4 | ret addr 4 | int val 4, int radix 1, int digits 1)
               mov {0}, its_strbuf
               add {0}, 60
             
its_loop:      sub {0}, 2                        ; size of char
               mov {4}, {16}
               mov {8}, 0
               mov 1, {8}, {20}                  ; getting the radix
               mod {4}, {8}                      ; the current digit is in {1}
               div {16}, {8}                     ; the remaining part is in {3}
               sub 1, {21}, 1                    ; 1 digit added
            
               mov {8}, {4}
               add {8}, {4}                      ; char = 2 x byte
               add {8}, its_digs                 ; {2} contains pointer to digit buffer

               mov {8}, [{8}]
            
               mov 2, [{0}], {8}                 ; moving 2 bytes of char
               if {16}, its_loop
              
               ; now we should add the remaining digits
               ifp 1, {21}, its_next
               jmp its_exit

its_next:      sub {0}, 2
               mov {4}, its_digs
               mov 2, {4}, [{4}]
               mov 2, [{0}], {4}                 ; adding zero
               sub 1, {21}, 1
               ifp 1, {21}, its_next                          
            
its_exit:      mov {16}, {0}                     ; result saved
               free 12
               ret

; *** HANDLERS SECTION **************************************************************************************************


               ; ***** Timer *****

timer_value:   text 0 0                          ; 4 bytes for timer value
timer_stack:   text 0 0 0 0 0 0 0 0              ; 16 bytes allocated for timer handler stack

timer_handler: alloc 4

               ; moving timer data to the "timer_value" address
               mov {0}, timer_value
               mov [{0}], {4+4}                  ; 4 allocated + 4 for status code (which is always HARDWARE_TIMER_REPORT_TIME)
               
               free 4
               hret

               
               ; ***** Keyboard *****

kbd_key:       text 0 0                          ; 4 bytes allocated for scan code
kbd_isdown:    text 0                            ; 1 byte allocated for "is key down" value

kbd_stack:     text 0 0 0 0 0 0 0 0              ; 16 bytes allocated for keyboard handler stack

kbd_handler:   alloc 4

               ; getting the first 4 bytes of stack as the key value
               mov {0}, kbd_key 
               mov [{0}], {4}

               ; getting the 5th byte of stack as the keydown value
               mov {0}, kbd_isdown
               ;mov 1, {8}, 1 
               mov 1, [{0}], {8}
               
               free 4
               hret

               
               ; ***** Console *****

console_success_flag:
               text 0                            ; 1 byte for success flag. 
                                                 ; "0" means "not handled yet"
                                                 ; "1" means "just handled" and 
                                                 ; should be changed to "0" immediately 
                                                 ; after it's readed

console_stack: text 0 0 0 0 0 0 0 0              ; 16 bytes for console stack

console_handler:
               alloc 8
               mov {0}, {8}
               sub {0}, 64                       ; 64 means HARDWARE_SUCCEEDED
               
               ifp 1, {0}, console_zero
console_one:   mov {0}, console_success_flag
               mov 1, {4}, 1
               mov 1, [{0}], {4}
               jmp console_end
               
console_zero:  mov {0}, console_success_flag
               mov 1, {4}, 0
               mov 1, [{0}], {4} 

console_end:   free 8
               hret


out_to_console_sync:
               alloc 8
console_wait_loop:
               mov {0}, console_success_flag
               mov 1, {0}, [{0}]
               ifp 1, {0}, console_wait_end
               jmp console_wait_loop
console_wait_end:
               ; clearing the flag
               mov {0}, console_success_flag
               mov 1, {4}, 0
               mov 1, [{0}], {4} 
               free 8
               ret
               
; *** UI SECTION ********************************************************************************************************

timer_calls:   text "Timer: " 0
timer_print:
               ; port in handler, should free 8 additional bytes on end
               alloc 10
              
               ; moving the cursor to 0,3
               mov {0}, 257
               mov 2, {4}, 0
               mov 2, {6}, 3
               out 2
               call out_to_console_sync
              
               ; printing out "timer: "
               mov {0}, 256                      ; 256 means "print the text out"
               mov {4}, timer_calls              ; address of the text buffer
               out 2
               call out_to_console_sync                             ; call terminal

               ; converting timer value to string
               mov {0}, timer_value
               mov {0}, [{0}]
               mov 1, {4}, 10                    ; radix
               mov 1, {5}, 0                     ; digits -- as much as it can 
               call inttostr
              
               ; printing out the timer
               mov {4}, {0}
               mov {0}, 256
               out 2
               call out_to_console_sync
              
               free 10
              
               ret

kbd_key_str:   text "Key: " 0 
kbd_isdown_str:text " is down" 10 0
kbd_isup_str:  text " is up  " 10 0
              
kbd_print:     alloc 10                           ; 4 * 2 + 2

kbd_next:
               ; moving the cursor to 0,4
               mov {0}, 257                      ; 257 means "set cursor position"
               mov 2, {4}, 0                     ; X
               mov 2, {6}, 4                     ; Y
               out 2
               call out_to_console_sync
              
               ; printing the text out
               mov {0}, 256                      ; 256 means "print the text out"
               mov {4}, kbd_key_str              ; address of the text buffer
               out 2
               call out_to_console_sync                             ; call terminal

               ; converting key code to string
               mov {0}, kbd_key
               mov {0}, [{0}]
               mov 1, {4}, 10                    ; radix
               mov 1, {5}, 3                     ; digits
               call inttostr

               ; printing out the key code
               mov {4}, {0}
               mov {0}, 256                      ; 256 means "print the text out"
               out 2
               call out_to_console_sync

               mov {0}, kbd_isdown
               mov 1, {0}, [{0}]

               if 1, {0}, kbd_down 
kbd_up:        mov {4}, kbd_isup_str
               jmp kbd_print_ud
kbd_down:      mov {4}, kbd_isdown_str

kbd_print_ud:  mov {0}, 256                      ; 256 means "print the text out"
               out 2
               call out_to_console_sync
              
kbd_exit:      free 10
              
               ret
            
; *** MAIN SECTION **************************************************************************************************
; main data

main_fox:      text "The quick brown fox jumps over the lazy dog." 10 10 0
main_devs:     text "Devices printout:" 10 0

main:          alloc 28                            ; allocating space for context data

               ; *** Initializing devices ***
               mov {0}, 0                          ; 0 is "HARDWARE_INITIALIZE" command

               ; setting the context for timer handler
               getcont {4}
               mov {0+4},  1                       ; port
               mov {12+4}, timer_stack             ; stack start
               mov {16+4}, 16                      ; stack size
               mov {20+4}, 16                      ; stack ptr
               mov {24+4}, timer_handler           ; flow
               out 1                               ; assuming timer is on the port #1 and sending the command to it

               ; setting the context for console handler
               getcont {4}
               mov {0+4},  1                       ; port
               mov {12+4}, console_stack           ; stack start
               mov {16+4}, 16                      ; stack size
               mov {20+4}, 16                      ; stack ptr
               mov {24+4}, console_handler         ; flow
               out 2                               ; assuming console is on the port #2 and sending the command to it

               ; setting the context for keyboard handler
               getcont {4}
               mov {0+4},  1                       ; port
               mov {12+4}, kbd_stack               ; stack start
               mov {16+4}, 16                      ; stack size
               mov {20+4}, 16                      ; stack ptr
               mov {24+4}, kbd_handler             ; flow
               ;out 3                               ; assuming keyboard is on the port #3 and sending the command to it


               ; *** Activating devices ***
               mov {0}, 1                          ; 1 is "HARDWARE_ACTIVATE" command
               out 1                               ; sending to timer
               out 2
               call out_to_console_sync            ; sending to console
               ;out 3                               ; sending to keyboard

               free 28


               ; *** Printing the welcome text ***

               alloc 8                           ; 4 * 2
          
               ; printing the text out
               mov {0}, 256                      ; 256 means "print the text out"
               mov {4}, main_fox                 ; address of the text buffer
               out 2
               call out_to_console_sync                             ; call terminal

               ; printing the text out
               mov {0}, 256                      ; 256 means "print the text out"
               mov {4}, main_devs                ; address of the text buffer
               out 2
               call out_to_console_sync                             ; call terminal

               ; printing out the value
               mov {4}, {0}
               mov {0}, 256
               out 2
               call out_to_console_sync              

               free 8

eternal:       
               call kbd_print
               call timer_print

               jmp eternal
               halt

               text "mega junk" 0