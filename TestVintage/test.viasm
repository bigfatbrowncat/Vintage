               jmp main                          ; the entry point is here

; *** HELPER FUNCTIONS SECTION *********************************************************************************************

inttostr:      ; in:  (integer value) 
               ; out: (target string pointer)

               jmp its_s
its_digs:      data "0123456789ABCDEF"
its_strbuf:    data 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0    ; 30 digits should be enough + zero in the end

its_s:         alloc 12                          ; 3 * 4 (text ptr 4, int buf1 4, int buf2 4 | ret addr 4 | int val 4, int radix 1, int digits 1)
               mov {0}, its_strbuf
               add {0}, 60
             
its_loop:      sub {0}, 2                        ; size of char
               mov {4}, {16}
               mov {8}, 0
               mov 1, {8}, {20}                  ; getting the radix
               mod {4}, {8}                      ; the current digit is in {1}
               div {16}, {8}                     ; the remaining part is in {3}
               sub 1, {21}, 1                    ; 1 digit added
            
               mov {8}, {4}
               add {8}, {4}                      ; char = 2 x byte
               add {8}, its_digs                 ; {2} contains pointer to digit buffer

               mov {8}, [{8}]
            
               mov 2, [{0}], {8}                 ; moving 2 bytes of char
               if {16}, its_loop
              
               ; now we should add the remaining digits
               ifp 1, {21}, its_next
               jmp its_exit

its_next:      sub {0}, 2
               mov {4}, its_digs
               mov 2, {4}, [{4}]
               mov 2, [{0}], {4}                 ; adding zero
               sub 1, {21}, 1
               ifp 1, {21}, its_next                          
            
its_exit:      mov {16}, {0}                     ; result saved
               free 12
               ret

; *** HANDLERS SECTION **************************************************************************************************

timer_value:   data 0 0                          ; 4 bytes allocated for timer value

timer_handler: alloc 4

               ; getting the first 4 bytes of stack as the timer value
               mov {0}, timer_value 
               mov [{0}], {4}

               free 4
               hret

kbd_key:       data 0 0                          ; 4 bytes allocated for scan code
kbd_isdown:    data 0                            ; 1 byte allocated for "is key down" value

kbd_handler:   alloc 4

               ; getting the first 4 bytes of stack as the key value
               mov {0}, kbd_key 
               mov [{0}], {4}

               ; getting the 5th byte of stack as the keydown value
               mov {0}, kbd_isdown
               ;mov 1, {8}, 1 
               mov 1, [{0}], {8}
               
               free 4
               hret

; *** UI SECTION ********************************************************************************************************

timer_calls:   data "Timer: " 0
timer_print:
               ; port in handler, should free 8 additional bytes on end
               alloc 10
              
               ; moving the cursor to 0,3
               mov {0}, 2
               mov 2, {4}, 0
               mov 2, {6}, 3
               out 2
              
               ; printing out "timer: "
               mov {0}, 1                        ; 1 means "print the text out"
               mov {4}, timer_calls              ; address of the text buffer
               out 2                             ; call terminal

               ; converting timer value to string
               mov {0}, timer_value
               mov {0}, [{0}]
               mov 1, {4}, 10                    ; radix
               mov 1, {5}, 0                     ; digits -- as much as it can 
               call inttostr
              
               ; printing out the timer
               mov {4}, {0}
               mov {0}, 1
               out 2
              
               free 10
              
               ret

kbd_key_str:   data "Key: " 0 
kbd_isdown_str:data " is down" 10 0
kbd_isup_str:  data " is up  " 10 0
              
kbd_print:     alloc 10                           ; 4 * 2 + 2

               ;if {13}, kbd_next
               ;jmp kbd_exit                      ; taking away the fake '0' events
kbd_next:
               ; moving the cursor to 0,4
               mov {0}, 2                        ; 2 means "set cursor position"
               mov 2, {4}, 0                     ; X
               mov 2, {6}, 4                     ; Y
               out 2
              
               ; printing the text out
               mov {0}, 1                        ; 1 means "print the text out"
               mov {4}, kbd_key_str              ; address of the text buffer
               out 2                             ; call terminal

               ; moving the cursor to 5,4 (after "Key: ")
               ;mov {0}, 2                        ; 2 means "set cursor position"
               ;mov 2, {4}, 5                     ; X
               ;mov 2, {6}, 4                     ; Y
               ;out 2
              
               ; converting key code to string
               mov {0}, kbd_key
               mov {0}, [{0}]
               mov 1, {4}, 10                    ; radix
               mov 1, {5}, 3                     ; digits
               call inttostr

               ; printing out the key code
               mov {4}, {0}
               mov {0}, 1
               out 2

               ; moving the cursor to 12,4 
               ;mov {0}, 2                        ; 2 means "set cursor position"
               ;mov 2, {4}, 12                    ; X
               ;mov 2, {6}, 4                     ; Y
               ;out 2

               mov {0}, kbd_isdown
               mov 1, {0}, [{0}]
               ;and 1, {0}, 1

               if 1, {0}, kbd_down 
kbd_up:        mov {4}, kbd_isup_str
               jmp kbd_print_ud
kbd_down:      mov {4}, kbd_isdown_str

kbd_print_ud:  mov {0}, 1
               out 2
              
               ; moving the cursor to 29,4 
               ;mov {0}, 2
               ;mov 2, {4}, 29
               ;mov 2, {6}, 4
               ;out 2
              
               ; converting modifiers to string
               ;mov 2, {0}, {11}                  ; 8 + 3
               ;mov 2, {2}, 0

               ;mov 1, {4}, 2                     ; radix
               ;mov 1, {5}, 11                    ; digits
               ;call inttostr

               ; printing out the key code
               ;mov {4}, {0}
               ;mov {0}, 1
               ;out 2
              
kbd_exit:      free 10
              
               ret
            
; *** MAIN SECTION **************************************************************************************************
; main data

main_fox:      data "The quick brown fox jumps over the lazy dog." 10 10 0
main_devs:     data "Devices printout:" 10 0

main:          alloc 8                           ; 4 * 2
          
               ; printing the text out
               mov {0}, 1                        ; 1 means "print the text out"
               mov {4}, main_fox                 ; address of the text buffer
               out 2                             ; call terminal

               ; printing the text out
               mov {0}, 1                        ; 1 means "print the text out"
               mov {4}, main_devs                ; address of the text buffer
               out 2                             ; call terminal

               ; printing out the value
               mov {4}, {0}
               mov {0}, 1
               out 2              

               alloc 24                           ; allocating space for context data

               ; setting the context for timer handler
               getcont {0}
               add {8}, 0                         ; stack start
               mov {12}, 64                       ; stack size
               mov {16}, {12}                     ; stack ptr
               mov {20}, timer_handler
               regin 1, {0}                       ; assuming timer is on the port #1

               ; setting the context for keyboard handler
               getcont {0}
               add {8}, 64                        ; stack start
               mov {12}, 64                       ; stack size
               mov {16}, {12}                     ; stack ptr
               mov {20}, kbd_handler
               regin 3, {0}                       ; keyboard is on the port #3

               ; setting the context for keyboard handler
getcont:       getcont {0}
               add {8}, 128                       ; stack start
               sub {12}, 128                      ; stack size
               mov {16}, {12}                     ; stack ptr
               add {20}, after_setcont
               sub {20}, getcont
               setcont {0}
after_setcont:

               free 24
               
               free 8

eternal:       
               call kbd_print
               call timer_print

               jmp eternal
               halt

               data "mega junk" 0